/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
  Usage:

  ./gradlew task_name

  (or gradlew.bat task_name if you have the misfortune to have to use Windows)

  If no task name is specified then the default task 'assemble' is run

  Task names are:

  idea - generate a skeleton IntelliJ IDEA project

  eclipse - generate a skeleton Eclipse IDE project

  assemble - builds the outputs, by default this is the module zip file. It can also include a jar file if produceJar
            in gradle.properties is set to true. Outputs are created in build/libs.
            if pullInDeps in gradle.properties is set to 'true' then the modules dependencies will be
            automatically pulled into a nested mods directory inside the module during the build

  copyMod - builds and copies the module to the local 'mods' directory so you can execute vertx runmod (etc)
            directly from the command line

  modZip - creates the module zip into build/libs

  clean - cleans everything up

  test - runs the tests. An nice html test report is created in build/reports/tests (index.html)

  runMod - runs the module. This is similar to executing vertx runmod from the command line except that it does
           not use the version of Vert.x installed and on the PATH to run it. Instead it uses the version of Vert.x
           that the module was compiled and tested against.

  pullInDeps - pulls in all dependencies of the module into a nested module directory

  uploadArchives - upload the module zip file (and jar if one has been created) to Nexus. You will need to
                   configure sonatypeUsername and sonatypePassword in ~/.gradle/gradle.properties.

  install - install any jars produced to the local Maven repository (.m2)
*/

// Convenient and informative logging
allprojects {
  project.apply from: "$rootDir/gradle/project-logging.gradle"
}

info "Beginning Configuration\n"

subprojects {
  info "Applying Module Language Plugins"
  project.apply plugin: 'java'
  project.apply plugin: 'groovy'
  project.apply plugin: 'idea'
  project.apply plugin: 'eclipse'

  // Ignore this project if it is not one of our vertx modules
  if(!isModuleProject(project)){
    info "Not a vert.x module. Ignoring.\n"
  }else {
    info "Is a vert.x module."
    project.apply from: "$rootDir/gradle/module-configuration.gradle"
    info("Configuration Complete\n")
  }
}

// Helper Functions
def isModuleProject(Project project){
  def result = new File("$project.projectDir/$VERTX_GRADLE_FILENAME").canRead()
  return result
}