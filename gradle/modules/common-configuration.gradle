// Configuration

defaultTasks = ['assemble']

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

configurations {
  provided
  testCompile.extendsFrom provided
}

repositories {
  mavenLocal()
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
  mavenCentral()
}

dependencies {
  provided "io.vertx:vertx-core:$vertxVersion"
  provided "io.vertx:vertx-platform:$vertxVersion"
  testCompile "junit:junit:$junitVersion"
  testCompile "io.vertx:testtools:$toolsVersion"
}

sourceSets {
  main {
    compileClasspath = compileClasspath + configurations.provided
  }
}

task copyMod(type:Copy, dependsOn: 'classes', description: 'Assemble the module into the local mods directory' ) {
  // Copy into module directory
  into "$rootDir/mods/$project.moduleName"
  from compileJava
  from 'src/main/resources'

  // and then into module library directory
  into( 'lib' ) {
    from configurations.compile.copy {
      return it.dependencyProject.isLibrary
    }
  }
}

task modZip(type: Zip, dependsOn: 'pullInDeps', description: 'Package the module .zip file') {
  group = 'vert.x'
  description = "Assembles a vert.x module"
  destinationDir = project.file('build/libs')
  archiveName = "${project.modulename}-${project.ext.version}" + ".zip"
  from copyMod
}

task pullInDeps(dependsOn: copyMod, description: 'Pull in all the module dependencies for the module into the nested mods directory') << {
  if (pullInDeps == 'true') {
    def pm = PlatformLocator.factory.createPlatformManager()
    System.out.println("Pulling in dependencies for module $project.moduleName Please wait")
    pm.pullInDependencies(project.moduleName)
    System.out.println("Dependencies pulled into mods directory of module")
  }
}

compileJava {
  project.configurations.compile.dependencies.all {
    // If this is not a module then we ignore it
    if(!dependencyProject.isModule){
      return
    }

    // Place a dependency that will install the mod into the mods directory
    project.info "Copy $dependencyProject"
    dependsOn dependencyProject.copyMod
  }
}

artifacts {
  archives modZip
}

test {
  dependsOn copyMod

  // Make sure tests are always run!
  outputs.upToDateWhen { false }

  // Show output
  testLogging.showStandardStreams = true

  testLogging { exceptionFormat "full" }
}